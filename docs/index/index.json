{"interfaceLanguages":{"swift":[{"children":[{"title":"Animating","type":"groupMarker"},{"path":"\/documentation\/anima\/animating-properties","title":"Animating Properties","type":"article"},{"children":[{"title":"Animations","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/animate(withdecay:decelerationrate:delay:options:animations:completion:)","title":"static func animate(withDecay: Anima.DecayAnimationMode, decelerationRate: Double, delay: TimeInterval, options: Anima.AnimationOptions, animations: () -> Void, completion: ((Bool, Bool) -> Void)?)","type":"method"},{"path":"\/documentation\/anima\/anima\/animate(witheasing:duration:delay:options:animations:completion:)","title":"static func animate(withEasing: TimingFunction, duration: TimeInterval, delay: TimeInterval, options: Anima.AnimationOptions, animations: () -> Void, completion: ((Bool, Bool) -> Void)?)","type":"method"},{"path":"\/documentation\/anima\/anima\/animate(withspring:gesturevelocity:delay:options:animations:completion:)","title":"static func animate(withSpring: Spring, gestureVelocity: (some AnimatableProperty)?, delay: TimeInterval, options: Anima.AnimationOptions, animations: () -> Void, completion: ((Bool, Bool) -> Void)?)","type":"method"},{"title":"Animation Options","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/preferredframeraterange","title":"static var preferredFrameRateRange: CAFrameRateRange","type":"property"},{"children":[{"title":"Constant","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/animationoptions\/integralizevalues","title":"static let integralizeValues: Anima.AnimationOptions","type":"property"},{"path":"\/documentation\/anima\/anima\/animationoptions\/repeats","title":"static let repeats: Anima.AnimationOptions","type":"property"},{"path":"\/documentation\/anima\/anima\/animationoptions\/autoreverse","title":"static let autoreverse: Anima.AnimationOptions","type":"property"},{"path":"\/documentation\/anima\/anima\/animationoptions\/resetspringvelocity","title":"static let resetSpringVelocity: Anima.AnimationOptions","type":"property"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/animationoptions\/init(rawvalue:)","title":"init(rawValue: UInt)","type":"init"},{"path":"\/documentation\/anima\/anima\/animationoptions\/rawvalue","title":"let rawValue: UInt","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/animationoptions\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/anima\/anima\/animationoptions\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/animationoptions\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/anima\/anima\/animationoptions\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/animationoptions\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/animationoptions\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/anima\/anima\/animationoptions\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/animationoptions\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/animationoptions\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/anima\/anima\/animationoptions\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/animationoptions\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/anima\/anima\/animationoptions\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/animationoptions\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/animationoptions\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/anima\/anima\/animationoptions\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/anima\/anima\/animationoptions\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/anima\/anima\/animationoptions","title":"Anima.AnimationOptions","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/decayanimationmode\/value","title":"case value","type":"case"},{"path":"\/documentation\/anima\/anima\/decayanimationmode\/velocity","title":"case velocity","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/decayanimationmode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/anima\/anima\/decayanimationmode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/anima\/decayanimationmode","title":"Anima.DecayAnimationMode","type":"enum"},{"title":"Stop Animations","type":"groupMarker"},{"path":"\/documentation\/anima\/anima\/stopallanimations(immediately:)","title":"static func stopAllAnimations(immediately: Bool)","type":"method"}],"path":"\/documentation\/anima\/anima","title":"Anima","type":"class"},{"title":"Animatable Property","type":"groupMarker"},{"path":"\/documentation\/anima\/animatableproperties","title":"Animatable Properties","type":"article"},{"children":[{"title":"Animating data","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/anima\/animatableproperty\/init(_:)-1svvs","title":"init(Self)","type":"init"},{"path":"\/documentation\/anima\/animatableproperty\/init(_:)-5rbx1","title":"init(AnimatableArray<Double>)","type":"init"},{"path":"\/documentation\/anima\/animatableproperty\/init(_:)-n050","title":"init(AnimatableArray<Double>)","type":"init"},{"path":"\/documentation\/anima\/animatableproperty\/init(_:)-23o2q","title":"init(AnimatableArray<Double>)","type":"init"}],"title":"AnimatableProperty Implementations","type":"groupMarker"}],"path":"\/documentation\/anima\/animatableproperty\/init(_:)-9bv2w","title":"init(Self.AnimatableData)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/anima\/animatableproperty\/animatabledata-46otf","title":"var animatableData: Self","type":"property"}],"title":"AnimatableProperty Implementations","type":"groupMarker"}],"path":"\/documentation\/anima\/animatableproperty\/animatabledata-8pqdo","title":"var animatableData: Self.AnimatableData","type":"property"},{"path":"\/documentation\/anima\/animatableproperty\/animatabledata-swift.associatedtype","title":"AnimatableData","type":"associatedtype"},{"children":[{"children":[{"path":"\/documentation\/anima\/animatableproperty\/scaledintegral-3wwha","title":"var scaledIntegral: Self","type":"property"}],"title":"AnimatableProperty Implementations","type":"groupMarker"}],"path":"\/documentation\/anima\/animatableproperty\/scaledintegral-7mdub","title":"var scaledIntegral: Self","type":"property"},{"path":"\/documentation\/anima\/animatableproperty\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/anima\/animatableproperty","title":"AnimatableProperty","type":"protocol"},{"children":[{"title":"Creating an Array","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/init()","title":"init()","type":"init"},{"path":"\/documentation\/anima\/animatablearray\/init(_:)-1a7aa","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/anima\/animatablearray\/init(arrayliteral:)","title":"init(arrayLiteral: Element...)","type":"init"},{"path":"\/documentation\/anima\/animatablearray\/init(repeating:count:)-2b041","title":"init(repeating: Element, count: Int)","type":"init"},{"title":"Inspecting an Array","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/anima\/animatablearray\/count","title":"var count: Int","type":"property"},{"title":"Accessing Elements","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/subscript(_:)-32k7c","title":"subscript(Int) -> Element","type":"subscript"},{"path":"\/documentation\/anima\/animatablearray\/first","title":"var first: Element?","type":"property"},{"path":"\/documentation\/anima\/animatablearray\/last","title":"var last: Element?","type":"property"},{"path":"\/documentation\/anima\/animatablearray\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/anima\/animatablearray\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/anima\/animatablearray\/subscript(_:)-9n8mo","title":"subscript(Range<Int>) -> ArraySlice<Element>","type":"subscript"},{"path":"\/documentation\/anima\/animatablearray\/subscript(safe:)","title":"subscript(safe _: AnimatableArray<Element>.Index) -> Element?","type":"subscript"},{"title":"Adding Elements","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/replacesubrange(_:with:)-3gb2q","title":"func replaceSubrange<C, R>(R, with: C)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/anima\/animatablearray\/+(_:_:)-4jhtd","title":"static func + (AnimatableArray<Element>, AnimatableArray<Element>) -> AnimatableArray<Element>","type":"op"},{"path":"\/documentation\/anima\/animatablearray\/+=(_:_:)-8tlnn","title":"static func += (inout AnimatableArray<Element>, AnimatableArray<Element>)","type":"op"},{"path":"\/documentation\/anima\/animatablearray\/+=(_:_:)-qpvt","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/anima\/animatablearray\/-(_:_:)","title":"static func - (AnimatableArray<Element>, AnimatableArray<Element>) -> AnimatableArray<Element>","type":"op"},{"path":"\/documentation\/anima\/animatablearray\/-=(_:_:)-4y1n4","title":"static func -= (inout Self, Self)","type":"op"},{"path":"\/documentation\/anima\/animatablearray\/-=(_:_:)-69chj","title":"static func -= (inout AnimatableArray<Element>, AnimatableArray<Element>)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/zero","title":"static var zero: AnimatableArray<Element>","type":"property"}],"path":"\/documentation\/anima\/animatablearray\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/firstrange(of:)-8sp6q","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/joined(separator:)-8dqqr","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/anima\/animatablearray\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/firstrange(of:)-7d62v","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/map(_:)-vo2v","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/subscript(_:)-3duu8","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/anima\/animatablearray\/subscript(_:)-79tk0","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/anima\/animatablearray\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/anima\/animatablearray\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/anima\/animatablearray\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/anima\/animatablearray\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/anima\/animatablearray\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/anima\/animatablearray\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/anima\/animatablearray\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/move(fromoffsets:tooffset:)","title":"func move(fromOffsets: IndexSet, toOffset: Int)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/partition(by:)-1hp6j","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/partition(by:)-br2f","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/sort(using:)-1bvo8","title":"func sort<Comparator>(using: Comparator)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/sort(using:)-78990","title":"func sort<S, Comparator>(using: S)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/subscript(_:)-3gfdy","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/anima\/animatablearray\/subscript(_:)-8726","title":"subscript(Range<Self.Index>) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/anima\/animatablearray\/subscript(_:)-87wl1","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/anima\/animatablearray\/subscript(_:)-9khl6","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"}],"path":"\/documentation\/anima\/animatablearray\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/anima\/animatablearray\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/+(_:_:)-11108","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/anima\/animatablearray\/+(_:_:)-1fqt8","title":"static func + <Other>(Other, Self) -> Self","type":"op"},{"path":"\/documentation\/anima\/animatablearray\/+(_:_:)-495vp","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/anima\/animatablearray\/+=(_:_:)-8fev2","title":"static func += <Other>(inout Self, Other)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/init(_:)-42uu","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/anima\/animatablearray\/init(repeating:count:)-755z5","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/append(_:)","title":"func append(Self.Element)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/applying(_:)","title":"func applying(CollectionDifference<Self.Element>) -> Self?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> Self","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/insert(_:at:)","title":"func insert(Self.Element, at: Self.Index)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/insert(contentsof:at:)","title":"func insert<C>(contentsOf: C, at: Self.Index)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/poplast()","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/remove(at:)","title":"func remove(at: Self.Index) -> Self.Element","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/remove(atoffsets:)","title":"func remove(atOffsets: IndexSet)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/removeall(keepingcapacity:)","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/removeall(where:)-5g89m","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/removeall(where:)-8n2ac","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/removefirst()","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/removefirst(_:)","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/removelast()","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/removesubrange(_:)-1xn9q","title":"func removeSubrange(Range<Self.Index>)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/removesubrange(_:)-egz8","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/replace(_:with:maxreplacements:)","title":"func replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/replacesubrange(_:with:)-5wlus","title":"func replaceSubrange<C, R>(R, with: C)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/replacesubrange(_:with:)-u8vz","title":"func replaceSubrange<C>(Range<Self.Index>, with: C)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/replacing(_:with:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/replacing(_:with:subrange:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/trimprefix(_:)","title":"func trimPrefix<Prefix>(Prefix)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/trimprefix(while:)","title":"func trimPrefix(while: (Self.Element) throws -> Bool) rethrows","type":"method"}],"path":"\/documentation\/anima\/animatablearray\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/anima\/animatablearray\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/fill(using:)-5qdhz","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/fill(using:)-6bkqd","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/fill(using:)-9islb","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/flatmap(_:)-2mdjl","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/flatmap(_:)-3cu6p","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/joined(separator:)-30vgs","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/joined(separator:)-6c8wq","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/map(_:)-67hc0","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/sorted(using:)-3kko6","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/sorted(using:)-5iukr","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/anima\/animatablearray\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/magnitudesquared","title":"var magnitudeSquared: Double","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/animatablearray\/interpolate(towards:amount:)","title":"func interpolate(towards: Self, amount: Double)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/interpolated(towards:amount:)","title":"func interpolated(towards: Self, amount: Double) -> Self","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/scale(by:)","title":"func scale(by: Double)","type":"method"},{"path":"\/documentation\/anima\/animatablearray\/scaled(by:)","title":"func scaled(by: Double) -> Self","type":"method"}],"path":"\/documentation\/anima\/animatablearray\/vectorarithmetic-implementations","title":"VectorArithmetic Implementations","type":"symbol"}],"path":"\/documentation\/anima\/animatablearray","title":"AnimatableArray","type":"struct"},{"title":"Animatable Property Provider","type":"groupMarker"},{"children":[{"title":"Accessing Animatable Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/anima\/animatablepropertyprovider\/animator-97xcu","title":"var animator: PropertyAnimator<Self>","type":"property"},{"path":"\/documentation\/anima\/animatablepropertyprovider\/animator-6pibi","title":"var animator: LayerAnimator<Self>","type":"property"},{"path":"\/documentation\/anima\/animatablepropertyprovider\/animator-1xmmh","title":"var animator: ViewAnimator<Self>","type":"property"}],"title":"AnimatablePropertyProvider Implementations","type":"groupMarker"}],"path":"\/documentation\/anima\/animatablepropertyprovider\/animator-94wn0","title":"var animator: PropertyAnimator<Self.Provider>","type":"property"},{"path":"\/documentation\/anima\/animatablepropertyprovider\/provider","title":"Provider","type":"associatedtype"}],"path":"\/documentation\/anima\/animatablepropertyprovider","title":"AnimatablePropertyProvider","type":"protocol"},{"children":[{"title":"Accessing Animations","type":"groupMarker"},{"path":"\/documentation\/anima\/propertyanimator\/animations","title":"var animations: [String : AnimationProviding]","type":"property"},{"path":"\/documentation\/anima\/propertyanimator\/subscript(animation:)","title":"subscript<Value>(animation _: WritableKeyPath<Provider, Value>) -> AnimationProviding?","type":"subscript"},{"title":"Accessing Animation Velocities","type":"groupMarker"},{"path":"\/documentation\/anima\/propertyanimator\/subscript(velocity:)","title":"subscript<Value>(velocity _: WritableKeyPath<Provider, Value>) -> Value","type":"subscript"},{"title":"Accessing Values","type":"groupMarker"},{"path":"\/documentation\/anima\/propertyanimator\/subscript(_:)","title":"subscript<Value>(WritableKeyPath<Provider, Value>) -> Value","type":"subscript"}],"path":"\/documentation\/anima\/propertyanimator","title":"PropertyAnimator","type":"class"},{"children":[{"title":"Accessing animations","type":"groupMarker"},{"path":"\/documentation\/anima\/propertyanimator\/animations","title":"var animations: [String : AnimationProviding]","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/animation(for:)","title":"func animation<Value>(for: WritableKeyPath<LayerAnimator<Layer>, Value>) -> AnimationProviding?","type":"method"},{"path":"\/documentation\/anima\/layeranimator\/animationvelocity(for:)","title":"func animationVelocity<Value>(for: WritableKeyPath<LayerAnimator<Layer>, Value>) -> Value?","type":"method"},{"title":"Animatable properties","type":"groupMarker"},{"path":"\/documentation\/anima\/layeranimator\/anchorpoint","title":"var anchorPoint: CGPoint","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/anchorpointz","title":"var anchorPointZ: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/backgroundcolor","title":"var backgroundColor: CGColor?","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/bounds","title":"var bounds: CGRect","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/center","title":"var center: CGPoint","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/cornerradius","title":"var cornerRadius: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/frame","title":"var frame: CGRect","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/innershadow","title":"var innerShadow: ShadowConfiguration","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/opacity","title":"var opacity: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/origin","title":"var origin: CGPoint","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/rotation","title":"var rotation: CGVector3","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/scale","title":"var scale: CGPoint","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/shadow","title":"var shadow: ShadowConfiguration","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/size","title":"var size: CGSize","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/transform","title":"var transform: CATransform3D","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/translation","title":"var translation: CGPoint","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/zposition","title":"var zPosition: CGFloat","type":"property"},{"title":"CAShapeLayer","type":"groupMarker"},{"path":"\/documentation\/anima\/layeranimator\/fillcolor","title":"var fillColor: CGColor?","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/linedashpattern","title":"var lineDashPattern: [Double]","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/linedashphase","title":"var lineDashPhase: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/linewidth","title":"var lineWidth: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/miterlimit","title":"var miterLimit: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/strokecolor","title":"var strokeColor: CGColor?","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/strokeend","title":"var strokeEnd: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/strokestart","title":"var strokeStart: CGFloat","type":"property"},{"title":"CAReplicatorLayer","type":"groupMarker"},{"path":"\/documentation\/anima\/layeranimator\/instancedelay","title":"var instanceDelay: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/linedashpattern","title":"var lineDashPattern: [Double]","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/linedashphase","title":"var lineDashPhase: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/linewidth","title":"var lineWidth: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/miterlimit","title":"var miterLimit: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/strokecolor","title":"var strokeColor: CGColor?","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/strokeend","title":"var strokeEnd: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/strokestart","title":"var strokeStart: CGFloat","type":"property"},{"title":"CAReplicatorLayer","type":"groupMarker"},{"path":"\/documentation\/anima\/layeranimator\/instancealphaoffset","title":"var instanceAlphaOffset: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/instanceblueoffset","title":"var instanceBlueOffset: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/instancecolor","title":"var instanceColor: CGColor?","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/instancedelay","title":"var instanceDelay: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/instancegreenoffset","title":"var instanceGreenOffset: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/instanceredoffset","title":"var instanceRedOffset: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/instancetransform","title":"var instanceTransform: CATransform3D","type":"property"},{"title":"CATiledLayer","type":"groupMarker"},{"path":"\/documentation\/anima\/layeranimator\/tilesize","title":"var tileSize: CGSize","type":"property"},{"title":"CAGradientLayer","type":"groupMarker"},{"path":"\/documentation\/anima\/layeranimator\/colors","title":"var colors: [CGColor]","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/endpoint","title":"var endPoint: CGPoint","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/locations","title":"var locations: [CGFloat]","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/startpoint","title":"var startPoint: CGPoint","type":"property"},{"title":"CAEmitterLayer","type":"groupMarker"},{"path":"\/documentation\/anima\/layeranimator\/birthrate","title":"var birthRate: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/emitterdepth","title":"var emitterDepth: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/emitterposition","title":"var emitterPosition: CGPoint","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/emittersize","title":"var emitterSize: CGSize","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/emitterzposition","title":"var emitterZPosition: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/lifetime","title":"var lifetime: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/spin","title":"var spin: CGFloat","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/velocity","title":"var velocity: CGFloat","type":"property"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/layeranimator\/border","title":"var border: BorderConfiguration","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/perspective","title":"var perspective: Perspective","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/rotationinradians","title":"var rotationInRadians: CGVector3","type":"property"},{"path":"\/documentation\/anima\/layeranimator\/skew","title":"var skew: Skew","type":"property"}],"path":"\/documentation\/anima\/layeranimator","title":"LayerAnimator","type":"class"},{"children":[{"title":"Accessing animations","type":"groupMarker"},{"path":"\/documentation\/anima\/propertyanimator\/animations","title":"var animations: [String : AnimationProviding]","type":"property"},{"path":"\/documentation\/anima\/layoutanimator\/animation(for:)","title":"func animation<Value>(for: WritableKeyPath<LayoutAnimator, Value>) -> AnimationProviding?","type":"method"},{"path":"\/documentation\/anima\/layoutanimator\/animationvelocity(for:)","title":"func animationVelocity<Value>(for: WritableKeyPath<LayoutAnimator, Value>) -> Value?","type":"method"},{"title":"Animatable properties","type":"groupMarker"},{"path":"\/documentation\/anima\/layoutanimator\/constant","title":"var constant: CGFloat","type":"property"}],"path":"\/documentation\/anima\/layoutanimator","title":"LayoutAnimator","type":"class"},{"children":[{"title":"Accessing animations","type":"groupMarker"},{"path":"\/documentation\/anima\/propertyanimator\/animations","title":"var animations: [String : AnimationProviding]","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/animation(for:)","title":"func animation<Value>(for: WritableKeyPath<ViewAnimator<View>, Value>) -> AnimationProviding?","type":"method"},{"path":"\/documentation\/anima\/viewanimator\/animationvelocity(for:)","title":"func animationVelocity<Value>(for: WritableKeyPath<ViewAnimator<View>, Value>) -> Value?","type":"method"},{"title":"Animatable properties","type":"groupMarker"},{"path":"\/documentation\/anima\/viewanimator\/alpha","title":"var alpha: CGFloat","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/backgroundcolor","title":"var backgroundColor: NSColor?","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/bounds","title":"var bounds: CGRect","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/center","title":"var center: CGPoint","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/cornerradius","title":"var cornerRadius: CGFloat","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/frame","title":"var frame: CGRect","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/innershadow","title":"var innerShadow: ShadowConfiguration","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/origin","title":"var origin: CGPoint","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/rotation","title":"var rotation: CGVector3","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/scale","title":"var scale: CGPoint","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/shadow","title":"var shadow: ShadowConfiguration","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/size","title":"var size: CGSize","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/transform3d","title":"var transform3D: CATransform3D","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/translation","title":"var translation: CGPoint","type":"property"},{"title":"NSBox","type":"groupMarker"},{"path":"\/documentation\/anima\/viewanimator\/contentviewmargins","title":"var contentViewMargins: CGSize","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/fillcolor","title":"var fillColor: NSColor","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/titlefontsize","title":"var titleFontSize: CGFloat","type":"property"},{"title":"NSButton","type":"groupMarker"},{"path":"\/documentation\/anima\/viewanimator\/contenttintcolor-8zkdt","title":"var contentTintColor: NSColor?","type":"property"},{"title":"NSColorWell","type":"groupMarker"},{"path":"\/documentation\/anima\/viewanimator\/color","title":"var color: NSColor","type":"property"},{"title":"NSControl","type":"groupMarker"},{"path":"\/documentation\/anima\/viewanimator\/doublevalue-1rd7u","title":"var doubleValue: Double","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/floatvalue","title":"var floatValue: Float","type":"property"},{"title":"NSImageView","type":"groupMarker"},{"path":"\/documentation\/anima\/viewanimator\/contenttintcolor-7tls5","title":"var contentTintColor: NSColor?","type":"property"},{"title":"NSScrollView","type":"groupMarker"},{"path":"\/documentation\/anima\/viewanimator\/documentoffset","title":"var documentOffset: CGPoint","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/magnification","title":"var magnification: CGFloat","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/setmagnification(_:centeredat:)","title":"func setMagnification(CGFloat, centeredAt: CGPoint)","type":"method"},{"title":"NSStackView\/UIStackView","type":"groupMarker"},{"path":"\/documentation\/anima\/viewanimator\/edgeinsets","title":"var edgeInsets: NSEdgeInsets","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/spacing","title":"var spacing: CGFloat","type":"property"},{"title":"NSTextField","type":"groupMarker"},{"path":"\/documentation\/anima\/viewanimator\/fontsize-3yvwy","title":"var fontSize: CGFloat","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/textcolor-44e46","title":"var textColor: NSColor?","type":"property"},{"title":"NSTextView","type":"groupMarker"},{"path":"\/documentation\/anima\/viewanimator\/fontsize-2t9f3","title":"var fontSize: CGFloat","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/textcolor-3yp1n","title":"var textColor: NSColor?","type":"property"},{"title":"NSProgressIndicator","type":"groupMarker"},{"path":"\/documentation\/anima\/viewanimator\/doublevalue-1an93","title":"var doubleValue: Double","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/minvalue","title":"var minValue: Double","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/maxvalue","title":"var maxValue: Double","type":"property"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/viewanimator\/border","title":"var border: BorderConfiguration","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/perspective","title":"var perspective: Perspective","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/rotationinradians","title":"var rotationInRadians: CGVector3","type":"property"},{"path":"\/documentation\/anima\/viewanimator\/skew","title":"var skew: Skew","type":"property"}],"path":"\/documentation\/anima\/viewanimator","title":"ViewAnimator","type":"class"},{"children":[{"title":"Accessing animations","type":"groupMarker"},{"path":"\/documentation\/anima\/propertyanimator\/animations","title":"var animations: [String : AnimationProviding]","type":"property"},{"path":"\/documentation\/anima\/windowanimator\/animation(for:)","title":"func animation<Value>(for: WritableKeyPath<WindowAnimator, Value>) -> AnimationProviding?","type":"method"},{"path":"\/documentation\/anima\/windowanimator\/animationvelocity(for:)","title":"func animationVelocity<Value>(for: WritableKeyPath<WindowAnimator, Value>) -> Value?","type":"method"},{"title":"Animatable properties","type":"groupMarker"},{"path":"\/documentation\/anima\/windowanimator\/alphavalue","title":"var alphaValue: CGFloat","type":"property"},{"path":"\/documentation\/anima\/windowanimator\/backgroundcolor","title":"var backgroundColor: NSColor","type":"property"},{"path":"\/documentation\/anima\/windowanimator\/center","title":"var center: CGPoint","type":"property"},{"path":"\/documentation\/anima\/windowanimator\/frame","title":"var frame: CGRect","type":"property"},{"path":"\/documentation\/anima\/windowanimator\/size","title":"var size: CGSize","type":"property"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/windowanimator\/origin","title":"var origin: CGPoint","type":"property"}],"path":"\/documentation\/anima\/windowanimator","title":"WindowAnimator","type":"class"},{"title":"Animations","type":"groupMarker"},{"path":"\/documentation\/anima\/animations","title":"Animations","type":"article"},{"children":[{"title":"Accessing the animation parameters","type":"groupMarker"},{"path":"\/documentation\/anima\/animationproviding\/id","title":"var id: UUID","type":"property"},{"path":"\/documentation\/anima\/animationproviding\/groupid","title":"var groupID: UUID?","type":"property"},{"path":"\/documentation\/anima\/animationproviding\/relativepriority","title":"var relativePriority: Int","type":"property"},{"path":"\/documentation\/anima\/animationproviding\/state","title":"var state: AnimatingState","type":"property"},{"title":"Starting and stopping the animation","type":"groupMarker"},{"path":"\/documentation\/anima\/animationproviding\/start(afterdelay:)","title":"func start(afterDelay: TimeInterval)","type":"method"},{"path":"\/documentation\/anima\/animationproviding\/stop(at:immediately:)","title":"func stop(at: AnimationPosition, immediately: Bool)","type":"method"},{"path":"\/documentation\/anima\/animationproviding\/pause()","title":"func pause()","type":"method"},{"path":"\/documentation\/anima\/animationproviding\/delay","title":"var delay: TimeInterval","type":"property"}],"path":"\/documentation\/anima\/animationproviding","title":"AnimationProviding","type":"protocol"},{"children":[{"title":"Constant","type":"groupMarker"},{"path":"\/documentation\/anima\/animationevent\/finished(at:)","title":"case finished(at: Value)","type":"case"},{"path":"\/documentation\/anima\/animationevent\/retargeted(from:to:)","title":"case retargeted(from: Value, to: Value)","type":"case"},{"path":"\/documentation\/anima\/animationevent\/isfinished","title":"var isFinished: Bool","type":"property"},{"path":"\/documentation\/anima\/animationevent\/isretargeted","title":"var isRetargeted: Bool","type":"property"}],"path":"\/documentation\/anima\/animationevent","title":"AnimationEvent","type":"enum"},{"children":[{"title":"Constant","type":"groupMarker"},{"path":"\/documentation\/anima\/animationposition\/end","title":"case end","type":"case"},{"path":"\/documentation\/anima\/animationposition\/start","title":"case start","type":"case"},{"path":"\/documentation\/anima\/animationposition\/current","title":"case current","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/animationposition\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/animationposition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/anima\/animationposition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/animationposition\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/animationposition\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/anima\/animationposition\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/animationposition","title":"AnimationPosition","type":"enum"},{"children":[{"title":"Constant","type":"groupMarker"},{"path":"\/documentation\/anima\/animatingstate\/inactive","title":"case inactive","type":"case"},{"path":"\/documentation\/anima\/animatingstate\/running","title":"case running","type":"case"},{"path":"\/documentation\/anima\/animatingstate\/ended","title":"case ended","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/animatingstate\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/animatingstate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/anima\/animatingstate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/animatingstate\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/animatingstate\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/anima\/animatingstate\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/animatingstate","title":"AnimatingState","type":"enum"},{"title":"Decay Animation","type":"groupMarker"},{"children":[{"title":"Creating the animation","type":"groupMarker"},{"path":"\/documentation\/anima\/decayanimation\/init(value:target:decelerationrate:)","title":"init(value: Value, target: Value, decelerationRate: Double)","type":"init"},{"path":"\/documentation\/anima\/decayanimation\/init(value:velocity:decelerationrate:)","title":"init(value: Value, velocity: Value, decelerationRate: Double)","type":"init"},{"title":"Starting and stopping the animation","type":"groupMarker"},{"path":"\/documentation\/anima\/decayanimation\/start(afterdelay:)","title":"func start(afterDelay: TimeInterval)","type":"method"},{"path":"\/documentation\/anima\/decayanimation\/stop(at:immediately:)","title":"func stop(at: AnimationPosition, immediately: Bool)","type":"method"},{"path":"\/documentation\/anima\/decayanimation\/pause()","title":"func pause()","type":"method"},{"path":"\/documentation\/anima\/decayanimation\/delay","title":"var delay: TimeInterval","type":"property"},{"path":"\/documentation\/anima\/decayanimation\/state","title":"var state: AnimatingState","type":"property"},{"title":"Accessing value, velocity and target","type":"groupMarker"},{"path":"\/documentation\/anima\/decayanimation\/target","title":"var target: Value","type":"property"},{"path":"\/documentation\/anima\/decayanimation\/value","title":"var value: Value","type":"property"},{"path":"\/documentation\/anima\/decayanimation\/velocity","title":"var velocity: Value","type":"property"},{"title":"Handling animation updates","type":"groupMarker"},{"path":"\/documentation\/anima\/decayanimation\/completion","title":"var completion: ((AnimationEvent<Value>) -> Void)?","type":"property"},{"path":"\/documentation\/anima\/decayanimation\/updateanimation(deltatime:)","title":"func updateAnimation(deltaTime: TimeInterval)","type":"method"},{"path":"\/documentation\/anima\/decayanimation\/valuechanged","title":"var valueChanged: ((Value) -> Void)?","type":"property"},{"title":"Accessing animation parameters","type":"groupMarker"},{"path":"\/documentation\/anima\/decayanimation\/decelerationrate","title":"var decelerationRate: Double","type":"property"},{"path":"\/documentation\/anima\/decayanimation\/id","title":"let id: UUID","type":"property"},{"path":"\/documentation\/anima\/decayanimation\/groupid","title":"var groupID: UUID?","type":"property"},{"path":"\/documentation\/anima\/decayanimation\/relativepriority","title":"var relativePriority: Int","type":"property"},{"path":"\/documentation\/anima\/decayanimation\/integralizevalues","title":"var integralizeValues: Bool","type":"property"},{"path":"\/documentation\/anima\/decayanimation\/autoreverse","title":"var autoreverse: Bool","type":"property"},{"path":"\/documentation\/anima\/decayanimation\/autostarts","title":"var autoStarts: Bool","type":"property"},{"path":"\/documentation\/anima\/decayanimation\/isreversed","title":"var isReversed: Bool","type":"property"},{"path":"\/documentation\/anima\/decayanimation\/repeats","title":"var repeats: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/decayanimation\/keyframeanimation()","title":"func keyframeAnimation() -> CAKeyframeAnimation","type":"method"},{"path":"\/documentation\/anima\/decayanimation\/keyframeanimation(forframerate:)","title":"func keyframeAnimation(forFramerate: Int?) -> CAKeyframeAnimation","type":"method"},{"path":"\/documentation\/anima\/decayanimation\/keyframeanimation(forscreen:)","title":"func keyframeAnimation(forScreen: NSScreen) -> CAKeyframeAnimation","type":"method"},{"path":"\/documentation\/anima\/decayanimation\/populatekeyframeanimationdata(deltatime:values:keytimes:)","title":"func populateKeyframeAnimationData(deltaTime: TimeInterval, values: inout [AnyObject], keyTimes: inout [NSNumber]) -> TimeInterval","type":"method"}],"path":"\/documentation\/anima\/decayanimation\/cakeyframeanimationemittable-implementations","title":"CAKeyframeAnimationEmittable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/decayanimation\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/anima\/decayanimation\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/anima\/decayanimation","title":"DecayAnimation","type":"class"},{"children":[{"title":"Creating the function","type":"groupMarker"},{"path":"\/documentation\/anima\/decayfunction\/init(decelerationrate:)","title":"init(decelerationRate: Double)","type":"init"},{"path":"\/documentation\/anima\/decayfunction\/decelerationrate","title":"var decelerationRate: Double","type":"property"},{"title":"Updating a value","type":"groupMarker"},{"path":"\/documentation\/anima\/decayfunction\/update(value:velocity:deltatime:)","title":"func update<V>(value: inout V, velocity: inout V, deltaTime: TimeInterval)","type":"method"},{"title":"Getting destination and velocity","type":"groupMarker"},{"path":"\/documentation\/anima\/decayfunction\/destination(value:velocity:decelerationrate:)","title":"static func destination<V>(value: V, velocity: V, decelerationRate: Double) -> V","type":"method"},{"path":"\/documentation\/anima\/decayfunction\/velocity(startvalue:tovalue:decelerationrate:)","title":"static func velocity<V>(startValue: V, toValue: V, decelerationRate: Double) -> V","type":"method"},{"title":"Getting duration","type":"groupMarker"},{"path":"\/documentation\/anima\/decayfunction\/duration(value:velocity:decelerationrate:)","title":"static func duration<Value>(value: Value, velocity: Value, decelerationRate: Double) -> TimeInterval","type":"method"},{"path":"\/documentation\/anima\/decayfunction\/duration(startvalue:tovalue:decelerationrate:)","title":"static func duration<Value>(startValue: Value, toValue: Value, decelerationRate: Double) -> TimeInterval","type":"method"},{"title":"Constants","type":"groupMarker"},{"path":"\/documentation\/anima\/decayfunction\/scrollviewdecelerationrate","title":"static let ScrollViewDecelerationRate: Double","type":"property"},{"path":"\/documentation\/anima\/decayfunction\/scrollviewdecelerationratefast","title":"static let ScrollViewDecelerationRateFast: Double","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/decayfunction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/anima\/decayfunction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/decayfunction","title":"DecayFunction","type":"struct"},{"title":"Easing Animation","type":"groupMarker"},{"children":[{"title":"Creating the animation","type":"groupMarker"},{"path":"\/documentation\/anima\/easinganimation\/init(timingfunction:duration:value:target:)","title":"init(timingFunction: TimingFunction, duration: CGFloat, value: Value, target: Value)","type":"init"},{"title":"Starting and stopping the animation","type":"groupMarker"},{"path":"\/documentation\/anima\/easinganimation\/start(afterdelay:)","title":"func start(afterDelay: TimeInterval)","type":"method"},{"path":"\/documentation\/anima\/easinganimation\/stop(at:immediately:)","title":"func stop(at: AnimationPosition, immediately: Bool)","type":"method"},{"path":"\/documentation\/anima\/easinganimation\/pause()","title":"func pause()","type":"method"},{"path":"\/documentation\/anima\/easinganimation\/delay","title":"var delay: TimeInterval","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/state","title":"var state: AnimatingState","type":"property"},{"title":"Accessing value, velocity and target","type":"groupMarker"},{"path":"\/documentation\/anima\/easinganimation\/target","title":"var target: Value","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/value","title":"var value: Value","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/velocity","title":"var velocity: Value","type":"property"},{"title":"Handling animation updates","type":"groupMarker"},{"path":"\/documentation\/anima\/easinganimation\/completion","title":"var completion: ((AnimationEvent<Value>) -> Void)?","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/updateanimation(deltatime:)","title":"func updateAnimation(deltaTime: TimeInterval)","type":"method"},{"path":"\/documentation\/anima\/easinganimation\/valuechanged","title":"var valueChanged: ((Value) -> Void)?","type":"property"},{"title":"Accessing animation parameters","type":"groupMarker"},{"path":"\/documentation\/anima\/easinganimation\/id","title":"let id: UUID","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/groupid","title":"var groupID: UUID?","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/relativepriority","title":"var relativePriority: Int","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/integralizevalues","title":"var integralizeValues: Bool","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/autoreverse","title":"var autoreverse: Bool","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/autostarts","title":"var autoStarts: Bool","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/isreversed","title":"var isReversed: Bool","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/repeats","title":"var repeats: Bool","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/timingfunction","title":"var timingFunction: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/duration","title":"var duration: CGFloat","type":"property"},{"path":"\/documentation\/anima\/easinganimation\/fractioncomplete","title":"var fractionComplete: CGFloat","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/easinganimation\/keyframeanimation()","title":"func keyframeAnimation() -> CAKeyframeAnimation","type":"method"},{"path":"\/documentation\/anima\/easinganimation\/keyframeanimation(forframerate:)","title":"func keyframeAnimation(forFramerate: Int?) -> CAKeyframeAnimation","type":"method"},{"path":"\/documentation\/anima\/easinganimation\/keyframeanimation(forscreen:)","title":"func keyframeAnimation(forScreen: NSScreen) -> CAKeyframeAnimation","type":"method"},{"path":"\/documentation\/anima\/easinganimation\/populatekeyframeanimationdata(deltatime:values:keytimes:)","title":"func populateKeyframeAnimationData(deltaTime: TimeInterval, values: inout [AnyObject], keyTimes: inout [NSNumber]) -> TimeInterval","type":"method"}],"path":"\/documentation\/anima\/easinganimation\/cakeyframeanimationemittable-implementations","title":"CAKeyframeAnimationEmittable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/easinganimation\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/anima\/easinganimation\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/anima\/easinganimation","title":"EasingAnimation","type":"class"},{"children":[{"title":"Creating a timing function","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/init(x1:y1:x2:y2:)","title":"init(x1: Double, y1: Double, x2: Double, y2: Double)","type":"init"},{"path":"\/documentation\/anima\/timingfunction\/init(_:)","title":"init(CAMediaTimingFunction)","type":"init"},{"path":"\/documentation\/anima\/timingfunction\/bezier(_:)","title":"case bezier(TimingFunction.UnitBezier)","type":"case"},{"path":"\/documentation\/anima\/timingfunction\/function(_:)","title":"case function((Double) -> (Double))","type":"case"},{"title":"Built-in timing functions","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/default","title":"static var `default`: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/linear","title":"static var linear: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easein","title":"static var easeIn: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easeineaseout","title":"static var easeInEaseOut: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easeout","title":"static var easeOut: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/swiftout","title":"static var swiftOut: TimingFunction","type":"property"},{"children":[{"title":"Back","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeinback","title":"static var easeInBack: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeoutback","title":"static var easeOutBack: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeineaseoutback","title":"static var easeInEaseOutBack: TimingFunction","type":"property"},{"title":"Bounce","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeinbounce","title":"static var easeInBounce: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeoutbounce","title":"static var easeOutBounce: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeineaseoutbounce","title":"static var easeInEaseOutBounce: TimingFunction","type":"property"},{"title":"Circular","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeincirc","title":"static var easeInCirc: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeoutcirc","title":"static var easeOutCirc: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeineaseoutcirc","title":"static var easeInEaseOutCirc: TimingFunction","type":"property"},{"title":"Cubic","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeincubic","title":"static var easeInCubic: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeoutcubic","title":"static var easeOutCubic: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeineaseoutcubic","title":"static var easeInEaseOutCubic: TimingFunction","type":"property"},{"title":"Elastic","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeinelastic","title":"static var easeInElastic: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeoutelastic","title":"static var easeOutElastic: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeineaseoutelastic","title":"static var easeInEaseOutElastic: TimingFunction","type":"property"},{"title":"Exponential","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeinexpo","title":"static var easeInExpo: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeoutexpo","title":"static var easeOutExpo: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeineaseoutexpo","title":"static var easeInEaseOutExpo: TimingFunction","type":"property"},{"title":"Sinusoidal","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeinsine","title":"static var easeInSine: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeoutsine","title":"static var easeOutSine: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeineaseoutsine","title":"static var easeInEaseOutSine: TimingFunction","type":"property"},{"title":"Quadratic","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeinquad","title":"static var easeInQuad: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeoutquad","title":"static var easeOutQuad: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeineaseoutquad","title":"static var easeInEaseOutQuad: TimingFunction","type":"property"},{"title":"Quartic","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeinquart","title":"static var easeInQuart: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeoutquart","title":"static var easeOutQuart: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeineaseoutquart","title":"static var easeInEaseOutQuart: TimingFunction","type":"property"},{"title":"Quintic","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeinquint","title":"static var easeInQuint: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeoutquint","title":"static var easeOutQuint: TimingFunction","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/easing\/easeineaseoutquint","title":"static var easeInEaseOutQuint: TimingFunction","type":"property"}],"path":"\/documentation\/anima\/timingfunction\/easing","title":"TimingFunction.Easing","type":"struct"},{"title":"Getting name","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/name","title":"var name: String","type":"property"},{"title":"Solve time","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/solve(at:epsilon:)","title":"func solve(at: Double, epsilon: Double) -> Double","type":"method"},{"path":"\/documentation\/anima\/timingfunction\/solve(at:duration:)","title":"func solve(at: Double, duration: Double) -> Double","type":"method"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/unitbezier\/init(first:second:)","title":"init(first: CGPoint, second: CGPoint)","type":"init"},{"path":"\/documentation\/anima\/timingfunction\/unitbezier\/init(x1:y1:x2:y2:)","title":"init(x1: Double, y1: Double, x2: Double, y2: Double)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/unitbezier\/first","title":"var first: CGPoint","type":"property"},{"path":"\/documentation\/anima\/timingfunction\/unitbezier\/second","title":"var second: CGPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/unitbezier\/solve(x:duration:)","title":"func solve(x: Double, duration: Double) -> Double","type":"method"},{"path":"\/documentation\/anima\/timingfunction\/unitbezier\/solve(x:epsilon:)","title":"func solve(x: Double, epsilon: Double) -> Double","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/unitbezier\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/anima\/timingfunction\/unitbezier\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/timingfunction\/unitbezier","title":"TimingFunction.UnitBezier","type":"struct"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/anima\/timingfunction\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/anima\/timingfunction\/==(_:_:)","title":"static func == (TimingFunction, TimingFunction) -> Bool","type":"op"}],"path":"\/documentation\/anima\/timingfunction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/timingfunction\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/anima\/timingfunction\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/timingfunction","title":"TimingFunction","type":"enum"},{"title":"Spring Animation","type":"groupMarker"},{"children":[{"title":"Creating the animation","type":"groupMarker"},{"path":"\/documentation\/anima\/springanimation\/init(spring:value:target:initialvelocity:)","title":"init(spring: Spring, value: Value, target: Value, initialVelocity: Value)","type":"init"},{"title":"Starting and stopping the animation","type":"groupMarker"},{"path":"\/documentation\/anima\/springanimation\/start(afterdelay:)","title":"func start(afterDelay: TimeInterval)","type":"method"},{"path":"\/documentation\/anima\/springanimation\/stop(at:immediately:)","title":"func stop(at: AnimationPosition, immediately: Bool)","type":"method"},{"path":"\/documentation\/anima\/springanimation\/pause()","title":"func pause()","type":"method"},{"path":"\/documentation\/anima\/springanimation\/delay","title":"var delay: TimeInterval","type":"property"},{"path":"\/documentation\/anima\/springanimation\/state","title":"var state: AnimatingState","type":"property"},{"title":"Accessing spring parameters","type":"groupMarker"},{"path":"\/documentation\/anima\/springanimation\/settlingtime","title":"var settlingTime: TimeInterval","type":"property"},{"path":"\/documentation\/anima\/springanimation\/spring","title":"var spring: Spring","type":"property"},{"title":"Accessing value, velocity and target","type":"groupMarker"},{"path":"\/documentation\/anima\/springanimation\/target","title":"var target: Value","type":"property"},{"path":"\/documentation\/anima\/springanimation\/value","title":"var value: Value","type":"property"},{"path":"\/documentation\/anima\/springanimation\/velocity","title":"var velocity: Value","type":"property"},{"title":"Handling animation updates","type":"groupMarker"},{"path":"\/documentation\/anima\/springanimation\/completion","title":"var completion: ((AnimationEvent<Value>) -> Void)?","type":"property"},{"path":"\/documentation\/anima\/springanimation\/updateanimation(deltatime:)","title":"func updateAnimation(deltaTime: TimeInterval)","type":"method"},{"path":"\/documentation\/anima\/springanimation\/valuechanged","title":"var valueChanged: ((Value) -> Void)?","type":"property"},{"title":"Accessing animation parameters","type":"groupMarker"},{"path":"\/documentation\/anima\/springanimation\/id","title":"let id: UUID","type":"property"},{"path":"\/documentation\/anima\/springanimation\/groupid","title":"var groupID: UUID?","type":"property"},{"path":"\/documentation\/anima\/springanimation\/relativepriority","title":"var relativePriority: Int","type":"property"},{"path":"\/documentation\/anima\/springanimation\/integralizevalues","title":"var integralizeValues: Bool","type":"property"},{"path":"\/documentation\/anima\/springanimation\/autoreverse","title":"var autoreverse: Bool","type":"property"},{"path":"\/documentation\/anima\/springanimation\/autostarts","title":"var autoStarts: Bool","type":"property"},{"path":"\/documentation\/anima\/springanimation\/isreversed","title":"var isReversed: Bool","type":"property"},{"path":"\/documentation\/anima\/springanimation\/repeats","title":"var repeats: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/springanimation\/keyframeanimation()","title":"func keyframeAnimation() -> CAKeyframeAnimation","type":"method"},{"path":"\/documentation\/anima\/springanimation\/keyframeanimation(forframerate:)","title":"func keyframeAnimation(forFramerate: Int?) -> CAKeyframeAnimation","type":"method"},{"path":"\/documentation\/anima\/springanimation\/keyframeanimation(forscreen:)","title":"func keyframeAnimation(forScreen: NSScreen) -> CAKeyframeAnimation","type":"method"},{"path":"\/documentation\/anima\/springanimation\/populatekeyframeanimationdata(deltatime:values:keytimes:)","title":"func populateKeyframeAnimationData(deltaTime: TimeInterval, values: inout [AnyObject], keyTimes: inout [NSNumber]) -> TimeInterval","type":"method"}],"path":"\/documentation\/anima\/springanimation\/cakeyframeanimationemittable-implementations","title":"CAKeyframeAnimationEmittable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/springanimation\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/anima\/springanimation\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/anima\/springanimation","title":"SpringAnimation","type":"class"},{"children":[{"title":"Creating Spring","type":"groupMarker"},{"path":"\/documentation\/anima\/spring\/init(duration:bounce:)","title":"init(duration: Double, bounce: Double)","type":"init"},{"path":"\/documentation\/anima\/spring\/init(response:dampingratio:mass:)","title":"init(response: Double, dampingRatio: Double, mass: Double)","type":"init"},{"path":"\/documentation\/anima\/spring\/init(settlingduration:dampingratio:epsilon:)","title":"init(settlingDuration: TimeInterval, dampingRatio: Double, epsilon: Double)","type":"init"},{"path":"\/documentation\/anima\/spring\/init(stiffness:dampingratio:mass:)","title":"init(stiffness: Double, dampingRatio: Double, mass: Double)","type":"init"},{"title":"Built-in springs","type":"groupMarker"},{"path":"\/documentation\/anima\/spring\/bouncy","title":"static let bouncy: Spring","type":"property"},{"path":"\/documentation\/anima\/spring\/bouncy(duration:extrabounce:)","title":"static func bouncy(duration: Double, extraBounce: Double) -> Spring","type":"method"},{"path":"\/documentation\/anima\/spring\/interactive","title":"static let interactive: Spring","type":"property"},{"path":"\/documentation\/anima\/spring\/smooth","title":"static let smooth: Spring","type":"property"},{"path":"\/documentation\/anima\/spring\/smooth(duration:extrabounce:)","title":"static func smooth(duration: Double, extraBounce: Double) -> Spring","type":"method"},{"path":"\/documentation\/anima\/spring\/snappy","title":"static let snappy: Spring","type":"property"},{"path":"\/documentation\/anima\/spring\/snappy(duration:extrabounce:)","title":"static func snappy(duration: Double, extraBounce: Double) -> Spring","type":"method"},{"title":"Getting spring characteristics","type":"groupMarker"},{"path":"\/documentation\/anima\/spring\/bounce","title":"var bounce: Double","type":"property"},{"path":"\/documentation\/anima\/spring\/damping","title":"let damping: Double","type":"property"},{"path":"\/documentation\/anima\/spring\/dampingratio","title":"let dampingRatio: Double","type":"property"},{"path":"\/documentation\/anima\/spring\/mass","title":"let mass: Double","type":"property"},{"path":"\/documentation\/anima\/spring\/response","title":"let response: Double","type":"property"},{"path":"\/documentation\/anima\/spring\/settlingduration","title":"let settlingDuration: TimeInterval","type":"property"},{"path":"\/documentation\/anima\/spring\/stiffness","title":"let stiffness: Double","type":"property"},{"title":"Updating spring value and velocity","type":"groupMarker"},{"path":"\/documentation\/anima\/spring\/update(value:velocity:target:deltatime:)","title":"func update<V>(value: inout V, velocity: inout V, target: V, deltaTime: TimeInterval)","type":"method"},{"title":"Getting spring value","type":"groupMarker"},{"path":"\/documentation\/anima\/spring\/value(fromvalue:tovalue:initialvelocity:time:)","title":"func value<V>(fromValue: V, toValue: V, initialVelocity: V, time: TimeInterval) -> V","type":"method"},{"path":"\/documentation\/anima\/spring\/value(target:initialvelocity:time:)","title":"func value<V>(target: V, initialVelocity: V, time: TimeInterval) -> V","type":"method"},{"title":"Getting spring velocity","type":"groupMarker"},{"path":"\/documentation\/anima\/spring\/velocity(fromvalue:tovalue:initialvelocity:time:)","title":"func velocity<V>(fromValue: V, toValue: V, initialVelocity: V, time: TimeInterval) -> V","type":"method"},{"path":"\/documentation\/anima\/spring\/velocity(target:initialvelocity:time:)","title":"func velocity<V>(target: V, initialVelocity: V, time: TimeInterval) -> V","type":"method"},{"title":"Getting spring force","type":"groupMarker"},{"path":"\/documentation\/anima\/spring\/force(fromvalue:tovalue:position:velocity:)","title":"func force<V>(fromValue: V, toValue: V, position: V, velocity: V) -> V","type":"method"},{"path":"\/documentation\/anima\/spring\/force(target:position:velocity:)","title":"func force<V>(target: V, position: V, velocity: V) -> V","type":"method"},{"title":"Getting spring settling duration","type":"groupMarker"},{"path":"\/documentation\/anima\/spring\/settlingduration(fromvalue:tovalue:initialvelocity:epsilon:)","title":"func settlingDuration<V>(fromValue: V, toValue: V, initialVelocity: V, epsilon: Double) -> Double","type":"method"},{"path":"\/documentation\/anima\/spring\/settlingduration(target:initialvelocity:epsilon:)","title":"func settlingDuration<V>(target: V, initialVelocity: V, epsilon: Double) -> Double","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/spring\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/anima\/spring\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/spring\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/anima\/spring\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/spring","title":"Spring","type":"struct"},{"title":"Creating Own Animations","type":"groupMarker"},{"children":[{"title":"Creating the animation","type":"groupMarker"},{"path":"\/documentation\/anima\/propertyanimation\/init(value:target:)","title":"init(value: Value, target: Value)","type":"init"},{"title":"Starting and stopping the animation","type":"groupMarker"},{"path":"\/documentation\/anima\/propertyanimation\/start(afterdelay:)","title":"func start(afterDelay: TimeInterval)","type":"method"},{"path":"\/documentation\/anima\/propertyanimation\/stop(at:immediately:)","title":"func stop(at: AnimationPosition, immediately: Bool)","type":"method"},{"path":"\/documentation\/anima\/propertyanimation\/pause()","title":"func pause()","type":"method"},{"path":"\/documentation\/anima\/propertyanimation\/delay","title":"var delay: TimeInterval","type":"property"},{"path":"\/documentation\/anima\/propertyanimation\/state","title":"var state: AnimatingState","type":"property"},{"title":"Handling animation updates","type":"groupMarker"},{"path":"\/documentation\/anima\/propertyanimation\/updateanimation(deltatime:)","title":"func updateAnimation(deltaTime: TimeInterval)","type":"method"},{"path":"\/documentation\/anima\/propertyanimation\/completion","title":"var completion: ((AnimationEvent<Value>) -> Void)?","type":"property"},{"title":"Accessing animation values","type":"groupMarker"},{"path":"\/documentation\/anima\/propertyanimation\/startvalue","title":"var startValue: Value","type":"property"},{"path":"\/documentation\/anima\/propertyanimation\/value","title":"var value: Value","type":"property"},{"path":"\/documentation\/anima\/propertyanimation\/target","title":"var target: Value","type":"property"},{"path":"\/documentation\/anima\/propertyanimation\/valuechanged","title":"var valueChanged: ((Value) -> Void)?","type":"property"},{"title":"Accessing animation parameters","type":"groupMarker"},{"path":"\/documentation\/anima\/propertyanimation\/id","title":"let id: UUID","type":"property"},{"path":"\/documentation\/anima\/propertyanimation\/groupid","title":"var groupID: UUID?","type":"property"},{"path":"\/documentation\/anima\/propertyanimation\/relativepriority","title":"var relativePriority: Int","type":"property"}],"path":"\/documentation\/anima\/propertyanimation","title":"PropertyAnimation","type":"class"},{"title":"Additions","type":"groupMarker"},{"children":[{"title":"Creating The Keyframe Animation","type":"groupMarker"},{"path":"\/documentation\/anima\/cakeyframeanimationemittable\/keyframeanimation()","title":"func keyframeAnimation() -> CAKeyframeAnimation","type":"method"},{"children":[{"children":[{"path":"\/documentation\/anima\/cakeyframeanimationemittable\/keyframeanimation(forframerate:)-6e1ys","title":"func keyframeAnimation(forFramerate: Int?) -> CAKeyframeAnimation","type":"method"}],"title":"CAKeyframeAnimationEmittable Implementations","type":"groupMarker"}],"path":"\/documentation\/anima\/cakeyframeanimationemittable\/keyframeanimation(forframerate:)-371zx","title":"func keyframeAnimation(forFramerate: Int?) -> CAKeyframeAnimation","type":"method"},{"path":"\/documentation\/anima\/cakeyframeanimationemittable\/keyframeanimation(forscreen:)","title":"func keyframeAnimation(forScreen: NSScreen) -> CAKeyframeAnimation","type":"method"},{"path":"\/documentation\/anima\/cakeyframeanimationemittable\/populatekeyframeanimationdata(deltatime:values:keytimes:)","title":"func populateKeyframeAnimationData(deltaTime: TimeInterval, values: inout [AnyObject], keyTimes: inout [NSNumber]) -> TimeInterval","type":"method"}],"path":"\/documentation\/anima\/cakeyframeanimationemittable","title":"CAKeyframeAnimationEmittable","type":"protocol"},{"children":[{"title":"Converting to Keyframe Value","type":"groupMarker"},{"path":"\/documentation\/anima\/cakeyframeanimationvalueconvertible\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/cakeyframeanimationvalueconvertible","title":"CAKeyframeAnimationValueConvertible","type":"protocol"},{"children":[{"title":"Creating the border configuration","type":"groupMarker"},{"path":"\/documentation\/anima\/borderconfiguration\/init(color:width:)","title":"init(color: NSColor?, width: CGFloat)","type":"init"},{"title":"Built-in border configurations","type":"groupMarker"},{"path":"\/documentation\/anima\/borderconfiguration\/black(width:)","title":"static func black(width: CGFloat) -> BorderConfiguration","type":"method"},{"path":"\/documentation\/anima\/borderconfiguration\/controlaccent(width:)","title":"static func controlAccent(width: CGFloat) -> BorderConfiguration","type":"method"},{"path":"\/documentation\/anima\/borderconfiguration\/color(_:width:)","title":"static func color(NSColor, width: CGFloat) -> BorderConfiguration","type":"method"},{"path":"\/documentation\/anima\/borderconfiguration\/none","title":"static var none: BorderConfiguration","type":"property"},{"title":"Configurating the border","type":"groupMarker"},{"path":"\/documentation\/anima\/borderconfiguration\/color","title":"var color: NSColor?","type":"property"},{"path":"\/documentation\/anima\/borderconfiguration\/width","title":"var width: CGFloat","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/borderconfiguration\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/borderconfiguration\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/borderconfiguration\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/borderconfiguration\/zero","title":"static var zero: BorderConfiguration","type":"property"}],"path":"\/documentation\/anima\/borderconfiguration\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/borderconfiguration\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/anima\/borderconfiguration\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/borderconfiguration","title":"BorderConfiguration","type":"struct"},{"children":[{"title":"Creating the shadow configuration","type":"groupMarker"},{"path":"\/documentation\/anima\/shadowconfiguration\/init(color:opacity:radius:offset:)","title":"init(color: NSColor?, opacity: CGFloat, radius: CGFloat, offset: CGPoint)","type":"init"},{"title":"Built-in shadow configurations","type":"groupMarker"},{"path":"\/documentation\/anima\/shadowconfiguration\/black(opacity:radius:offset:)","title":"static func black(opacity: CGFloat, radius: CGFloat, offset: CGPoint) -> ShadowConfiguration","type":"method"},{"path":"\/documentation\/anima\/shadowconfiguration\/controlaccent(opacity:radius:offset:)","title":"static func controlAccent(opacity: CGFloat, radius: CGFloat, offset: CGPoint) -> ShadowConfiguration","type":"method"},{"path":"\/documentation\/anima\/shadowconfiguration\/color(_:opacity:radius:offset:)","title":"static func color(NSColor, opacity: CGFloat, radius: CGFloat, offset: CGPoint) -> ShadowConfiguration","type":"method"},{"path":"\/documentation\/anima\/shadowconfiguration\/none","title":"static var none: ShadowConfiguration","type":"property"},{"title":"Configurating the shadow","type":"groupMarker"},{"path":"\/documentation\/anima\/shadowconfiguration\/color","title":"var color: NSColor?","type":"property"},{"path":"\/documentation\/anima\/shadowconfiguration\/opacity","title":"var opacity: CGFloat","type":"property"},{"path":"\/documentation\/anima\/shadowconfiguration\/radius","title":"var radius: CGFloat","type":"property"},{"path":"\/documentation\/anima\/shadowconfiguration\/offset","title":"var offset: CGPoint","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/shadowconfiguration\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/shadowconfiguration\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/shadowconfiguration\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/shadowconfiguration\/zero","title":"static var zero: ShadowConfiguration","type":"property"}],"path":"\/documentation\/anima\/shadowconfiguration\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/shadowconfiguration\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/anima\/shadowconfiguration\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/shadowconfiguration","title":"ShadowConfiguration","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/floatingpointinitializable\/init(_:)-2s3qx","title":"init(Float)","type":"init"},{"path":"\/documentation\/anima\/floatingpointinitializable\/init(_:)-90uwa","title":"init(Double)","type":"init"}],"path":"\/documentation\/anima\/floatingpointinitializable","title":"FloatingPointInitializable","type":"protocol"},{"children":[{"title":"Calculate rubberbanding of a value","type":"groupMarker"},{"path":"\/documentation\/anima\/rubberband\/value(for:boundssize:contentsize:coefficient:)","title":"static func value<Value>(for: Value, boundsSize: Value, contentSize: Value, coefficient: Value) -> Value","type":"method"},{"path":"\/documentation\/anima\/rubberband\/value(for:range:interval:coefficient:)","title":"static func value<Value>(for: Value, range: ClosedRange<Value>, interval: Value, coefficient: Value) -> Value","type":"method"},{"path":"\/documentation\/anima\/rubberband\/value(for:bounds:coefficient:)","title":"static func value(for: CGRect, bounds: CGRect, coefficient: Double) -> CGRect","type":"method"},{"title":"Constant","type":"groupMarker"},{"path":"\/documentation\/anima\/rubberband\/scrollviewrubberbandingconstant","title":"static let ScrollViewRubberBandingConstant: Double","type":"property"}],"path":"\/documentation\/anima\/rubberband","title":"Rubberband","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/anima\/nsuiview","title":"NSUIView","type":"typealias"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nscolor\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nscolor\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/appkit\/nscolor\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nscolor\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/anima\/appkit\/nscolor\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nscolor\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/appkit\/nscolor\/cakeyframeanimationvalueconvertible-implementations","title":"CAKeyframeAnimationValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/anima\/appkit\/nscolor","title":"NSColor","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nslayoutconstraint\/animator","title":"var animator: LayoutAnimator","type":"property"}],"path":"\/documentation\/anima\/appkit\/nslayoutconstraint","title":"NSLayoutConstraint","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nsview\/animator","title":"var animator: ViewAnimator<Self>","type":"property"}],"path":"\/documentation\/anima\/appkit\/nsview\/animatablepropertyprovider-implementations","title":"AnimatablePropertyProvider Implementations","type":"symbol"}],"path":"\/documentation\/anima\/appkit\/nsview","title":"NSView","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nswindow\/animator","title":"var animator: WindowAnimator","type":"property"}],"path":"\/documentation\/anima\/appkit\/nswindow","title":"NSWindow","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets\/zero","title":"static var zero: NSDirectionalEdgeInsets","type":"property"}],"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets\/cakeyframeanimationvalueconvertible-implementations","title":"CAKeyframeAnimationValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets\/==(_:_:)","title":"static func == (NSDirectionalEdgeInsets, NSDirectionalEdgeInsets) -> Bool","type":"op"}],"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/appkit\/nsdirectionaledgeinsets","title":"NSDirectionalEdgeInsets","type":"extension"}],"path":"\/documentation\/anima\/appkit","title":"AppKit","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgaffinetransform\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgaffinetransform\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/corefoundation\/cgaffinetransform\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgaffinetransform\/zero","title":"static var zero: CGAffineTransform","type":"property"}],"path":"\/documentation\/anima\/corefoundation\/cgaffinetransform\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgaffinetransform\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/corefoundation\/cgaffinetransform\/cakeyframeanimationvalueconvertible-implementations","title":"CAKeyframeAnimationValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/anima\/corefoundation\/cgaffinetransform","title":"CGAffineTransform","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgfloat\/init(_:)-53tkx","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/anima\/corefoundation\/cgfloat\/init(_:)-5ysth","title":"init(Self)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgfloat\/animatabledata","title":"var animatableData: CGFloat","type":"property"},{"path":"\/documentation\/anima\/corefoundation\/cgfloat\/scaledintegral","title":"var scaledIntegral: Self","type":"property"}],"path":"\/documentation\/anima\/corefoundation\/cgfloat\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgfloat\/isapproximatelyequal(to:epsilon:)","title":"func isApproximatelyEqual(to: CGFloat, epsilon: CGFloat) -> Bool","type":"method"}],"path":"\/documentation\/anima\/corefoundation\/cgfloat\/approximateequatable-implementations","title":"ApproximateEquatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgfloat\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/corefoundation\/cgfloat\/cakeyframeanimationvalueconvertible-implementations","title":"CAKeyframeAnimationValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/anima\/corefoundation\/cgfloat","title":"CGFloat","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgpoint\/init(_:)","title":"init(AnimatablePair<CGFloat, CGFloat>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgpoint\/scaledintegral","title":"var scaledIntegral: CGPoint","type":"property"}],"path":"\/documentation\/anima\/corefoundation\/cgpoint\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgpoint\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/corefoundation\/cgpoint\/cakeyframeanimationvalueconvertible-implementations","title":"CAKeyframeAnimationValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgpoint\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/anima\/corefoundation\/cgpoint\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/corefoundation\/cgpoint","title":"CGPoint","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgrect\/init(_:)","title":"init(AnimatablePair<CGPoint.AnimatableData, CGSize.AnimatableData>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgrect\/scaledintegral","title":"var scaledIntegral: CGRect","type":"property"}],"path":"\/documentation\/anima\/corefoundation\/cgrect\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgrect\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/corefoundation\/cgrect\/cakeyframeanimationvalueconvertible-implementations","title":"CAKeyframeAnimationValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/anima\/corefoundation\/cgrect","title":"CGRect","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgsize\/init(_:)","title":"init(AnimatablePair<CGFloat, CGFloat>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgsize\/scaledintegral","title":"var scaledIntegral: CGSize","type":"property"}],"path":"\/documentation\/anima\/corefoundation\/cgsize\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgsize\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/corefoundation\/cgsize\/cakeyframeanimationvalueconvertible-implementations","title":"CAKeyframeAnimationValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/anima\/corefoundation\/cgsize","title":"CGSize","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgvector\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/corefoundation\/cgvector\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/corefoundation\/cgvector\/scaledintegral","title":"var scaledIntegral: Self","type":"property"}],"path":"\/documentation\/anima\/corefoundation\/cgvector\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"}],"path":"\/documentation\/anima\/corefoundation\/cgvector","title":"CGVector","type":"extension"}],"path":"\/documentation\/anima\/corefoundation","title":"CoreFoundation","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/coregraphics\/cgcolor\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/coregraphics\/cgcolor\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/coregraphics\/cgcolor\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/coregraphics\/cgcolor\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/anima\/coregraphics\/cgcolor\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/coregraphics\/cgcolor\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/coregraphics\/cgcolor\/cakeyframeanimationvalueconvertible-implementations","title":"CAKeyframeAnimationValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/anima\/coregraphics\/cgcolor","title":"CGColor","type":"extension"}],"path":"\/documentation\/anima\/coregraphics","title":"CoreGraphics","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/decomposed\/cgquaternion\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/decomposed\/cgquaternion\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/decomposed\/cgquaternion\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/decomposed\/cgquaternion\/zero","title":"static var zero: CGQuaternion","type":"property"}],"path":"\/documentation\/anima\/decomposed\/cgquaternion\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"}],"path":"\/documentation\/anima\/decomposed\/cgquaternion","title":"CGQuaternion","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/decomposed\/cgvector3\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/decomposed\/cgvector3\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/decomposed\/cgvector3\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/decomposed\/cgvector3\/zero","title":"static var zero: CGVector3","type":"property"}],"path":"\/documentation\/anima\/decomposed\/cgvector3\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"}],"path":"\/documentation\/anima\/decomposed\/cgvector3","title":"CGVector3","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/decomposed\/cgvector4\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/decomposed\/cgvector4\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/decomposed\/cgvector4\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/decomposed\/cgvector4\/zero","title":"static var zero: CGVector4","type":"property"}],"path":"\/documentation\/anima\/decomposed\/cgvector4\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"}],"path":"\/documentation\/anima\/decomposed\/cgvector4","title":"CGVector4","type":"extension"}],"path":"\/documentation\/anima\/decomposed","title":"Decomposed","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/foundation\/nsnumber\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/foundation\/nsnumber\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/foundation\/nsnumber\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/foundation\/nsnumber\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/anima\/foundation\/nsnumber\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"}],"path":"\/documentation\/anima\/foundation\/nsnumber","title":"NSNumber","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/foundation\/nsedgeinsets\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/foundation\/nsedgeinsets\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/foundation\/nsedgeinsets\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/foundation\/nsedgeinsets\/zero","title":"static var zero: NSEdgeInsets","type":"property"}],"path":"\/documentation\/anima\/foundation\/nsedgeinsets\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/foundation\/nsedgeinsets\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/foundation\/nsedgeinsets\/cakeyframeanimationvalueconvertible-implementations","title":"CAKeyframeAnimationValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/foundation\/nsedgeinsets\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/anima\/foundation\/nsedgeinsets\/==(_:_:)","title":"static func == (NSEdgeInsets, NSEdgeInsets) -> Bool","type":"op"}],"path":"\/documentation\/anima\/foundation\/nsedgeinsets\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/foundation\/nsedgeinsets\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/anima\/foundation\/nsedgeinsets\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/foundation\/nsedgeinsets","title":"NSEdgeInsets","type":"extension"}],"path":"\/documentation\/anima\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/quartzcore\/calayer\/add(_:forkey:keypath:)-15ulj","title":"func add<T>(DecayAnimation<T>, forKey: String?, keyPath: WritableKeyPath<CALayer, T>)","type":"method"},{"path":"\/documentation\/anima\/quartzcore\/calayer\/add(_:forkey:keypath:)-444kh","title":"func add<T>(EasingAnimation<T>, forKey: String?, keyPath: WritableKeyPath<CALayer, T>)","type":"method"},{"path":"\/documentation\/anima\/quartzcore\/calayer\/add(_:forkey:keypath:)-50cq8","title":"func add(CAKeyframeAnimationEmittable, forKey: String, keyPath: String)","type":"method"},{"path":"\/documentation\/anima\/quartzcore\/calayer\/add(_:forkey:keypath:)-8fp45","title":"func add<T>(SpringAnimation<T>, forKey: String?, keyPath: WritableKeyPath<CALayer, T>)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/quartzcore\/calayer\/animator","title":"var animator: LayerAnimator<Self>","type":"property"}],"path":"\/documentation\/anima\/quartzcore\/calayer\/animatablepropertyprovider-implementations","title":"AnimatablePropertyProvider Implementations","type":"symbol"}],"path":"\/documentation\/anima\/quartzcore\/calayer","title":"CALayer","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/quartzcore\/catransform3d\/init(_:)","title":"init(AnimatableArray<Double>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/quartzcore\/catransform3d\/animatabledata","title":"var animatableData: AnimatableArray<Double>","type":"property"},{"path":"\/documentation\/anima\/quartzcore\/catransform3d\/scaledintegral","title":"var scaledIntegral: Self","type":"property"}],"path":"\/documentation\/anima\/quartzcore\/catransform3d\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/quartzcore\/catransform3d\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/quartzcore\/catransform3d\/cakeyframeanimationvalueconvertible-implementations","title":"CAKeyframeAnimationValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/anima\/quartzcore\/catransform3d\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/anima\/quartzcore\/catransform3d\/==(_:_:)","title":"static func == (CATransform3D, CATransform3D) -> Bool","type":"op"}],"path":"\/documentation\/anima\/quartzcore\/catransform3d\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/quartzcore\/catransform3d","title":"CATransform3D","type":"extension"}],"path":"\/documentation\/anima\/quartzcore","title":"QuartzCore","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/array\/init(_:)","title":"init(AnimatableArray<Element.AnimatableData>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/array\/animatabledata","title":"var animatableData: AnimatableArray<Element.AnimatableData>","type":"property"},{"path":"\/documentation\/anima\/swift\/array\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/array\/zero","title":"static var zero: Array<Element>","type":"property"}],"path":"\/documentation\/anima\/swift\/array\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/array\/isapproximatelyequal(to:epsilon:)","title":"func isApproximatelyEqual(to: Array<Element>, epsilon: Element) -> Bool","type":"method"}],"path":"\/documentation\/anima\/swift\/array\/approximateequatable-implementations","title":"ApproximateEquatable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/swift\/array","title":"Array","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/closedrange\/nsvalue","title":"var nsValue: NSValue","type":"property"}],"path":"\/documentation\/anima\/swift\/closedrange","title":"ClosedRange","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/double\/init(_:)-49f9p","title":"init(Self)","type":"init"},{"path":"\/documentation\/anima\/swift\/double\/init(_:)-7d8nf","title":"init(Double)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/double\/animatabledata","title":"var animatableData: Double","type":"property"},{"path":"\/documentation\/anima\/swift\/double\/scaledintegral","title":"var scaledIntegral: Self","type":"property"}],"path":"\/documentation\/anima\/swift\/double\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/double\/isapproximatelyequal(to:epsilon:)","title":"func isApproximatelyEqual(to: Double, epsilon: Double) -> Bool","type":"method"}],"path":"\/documentation\/anima\/swift\/double\/approximateequatable-implementations","title":"ApproximateEquatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/double\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/swift\/double\/cakeyframeanimationvalueconvertible-implementations","title":"CAKeyframeAnimationValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/anima\/swift\/double","title":"Double","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/float\/init(_:)","title":"init(Self)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/float\/animatabledata","title":"var animatableData: Self","type":"property"},{"path":"\/documentation\/anima\/swift\/float\/scaledintegral","title":"var scaledIntegral: Self","type":"property"}],"path":"\/documentation\/anima\/swift\/float\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/float\/isapproximatelyequal(to:epsilon:)","title":"func isApproximatelyEqual(to: Float, epsilon: Float) -> Bool","type":"method"}],"path":"\/documentation\/anima\/swift\/float\/approximateequatable-implementations","title":"ApproximateEquatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/float\/tokeyframevalue()","title":"func toKeyframeValue() -> AnyObject","type":"method"}],"path":"\/documentation\/anima\/swift\/float\/cakeyframeanimationvalueconvertible-implementations","title":"CAKeyframeAnimationValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/anima\/swift\/float","title":"Float","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/set\/isapproximatelyequal(to:epsilon:)","title":"func isApproximatelyEqual(to: Set<Element>, epsilon: Element) -> Bool","type":"method"}],"path":"\/documentation\/anima\/swift\/set\/approximateequatable-implementations","title":"ApproximateEquatable Implementations","type":"symbol"}],"path":"\/documentation\/anima\/swift\/set","title":"Set","type":"extension"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/optional\/init(_:)","title":"init(Wrapped.AnimatableData)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/optional\/animatabledata","title":"var animatableData: Wrapped.AnimatableData","type":"property"},{"path":"\/documentation\/anima\/swift\/optional\/scaledintegral","title":"var scaledIntegral: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/anima\/swift\/optional\/zero","title":"static var zero: Optional<Wrapped>","type":"property"}],"path":"\/documentation\/anima\/swift\/optional\/animatableproperty-implementations","title":"AnimatableProperty Implementations","type":"symbol"}],"path":"\/documentation\/anima\/swift\/optional","title":"Optional","type":"extension"}],"path":"\/documentation\/anima\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/anima","title":"Anima","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}